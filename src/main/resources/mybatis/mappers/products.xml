<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.jhta.mapper.ProductMapper">

	<!-- 신규 상품정보 추가 -->
	<insert id="insertProduct" parameterType="Product">
			insert into web_products
			(product_no, product_name, product_maker, product_description,
			product_price, product_discount_price, product_stock, cat_no)
			values
			(WEB_PRODUCTS_SEQ.nextval, #{name}, #{maker}, #{description}, #{price}, #{discountPrice},
			#{stock}, #{catNo})
	</insert> 

	<!-- 모든 상품 정보 조회 -->
	<select id="getAllProducts" resultType="Product">
		select product_no				as no,
			   product_name				as name,
			   product_maker			as maker,
			   product_description		as description,
			   product_price			as price,
			   product_discount_price	as discountPrice,
			   product_on_sell			as onSell,
			   product_stock			as stock,
			   product_update_date		as updateDate,
			   product_create_date		as createDate,
			   cat_no					as catNo
		from web_products
		order by product_no asc
	</select>
	
<!--  
	페이지번호에 맞는 상품정보 목록 조회하기
		- 페이지번호에 해당하는 시작행, 끝행 번호를 전달받아서 상품정보를 조회한다.
	
	List<Product> getAllProducts(@Param("begin") int begin, @Param("end") int end))
	
	<select id="getAllProducts" resultType="Product">
		select 
			no,
			name,
			maker,
			price,
			discountPrice,
			onSell
		from (
			select 
				row_number() over (order by product_no asc) rownumber,
				product_no				as no,
			    product_name			as name,
			    product_maker			as maker,
			    product_price			as price,
			    product_discount_price	as discountPrice,
			    product_on_sell			as onSell
			from web_products
		)
		where 
			rownumber between #{begin} and #{end}
	</select>
	
	
	페이지번호, 정렬순에 맞는 상품정보 조회하기
		- 조회시작행, 끝행, 정렬방식을 Map객체로 전달받아서 조회한다. 
	
	List<Product> getAllProducts(Map<String, Object> param);
	
	<select id="getAllProducts" parameterType="map" resultType="Product">
		select 
			no,
			name,
			maker,
			price,
			discountPrice,
			onSell
		from (
			select 
				<choose>
					<when test="sort == 'date'">
						row_number() over (order by product_no asc) rownumber,
					</when>
					<when test="sort == 'high'">
						row_number() over (order by product_price desc) rownumber,
					</when>
					<when test="sort == 'low'">
						row_number() over (order by product_price asc) rownumber,
					</when>
					<otherwise>
						row_number() over (order by product_no desc) rownumber,
					</otherwise>
				</choose>	
				product_no				as no,
			    product_name			as name,
			    product_maker			as maker,
			    product_price			as price,
			    product_discount_price	as discountPrice,
			    product_on_sell			as onSell
			from web_products
		)
		where 
			rownumber between #{begin} and #{end}
	</select>
	
	
	페이지번호, 정렬방식, 검색옵션, 검색키워드에 맞는 상품정보를 조회하기
		-> 조회시작행, 끝행, 정렬방식, 검색옵션("상품명", "제조사", "가격"), 해당 옵션의 값
		
	<select id="getAllProducts" parameterType="map" resultType="Product">
		select 
			no,
			name,
			maker,
			price,
			discountPrice,
			onSell
		from (
			select 
				<choose>
					<when test="sort == 'date'">
						row_number() over (order by product_no asc) rownumber,
					</when>
					<when test="sort == 'high'">
						row_number() over (order by product_price desc) rownumber,
					</when>
					<when test="sort == 'low'">
						row_number() over (order by product_price asc) rownumber,
					</when>
					<otherwise>
						row_number() over (order by product_no desc) rownumber,
					</otherwise>
				</choose>	
				product_no				as no,
			    product_name			as name,
			    product_maker			as maker,
			    product_price			as price,
			    product_discount_price	as discountPrice,
			    product_on_sell			as onSell
			from web_products
			<where>
				<choose>
					<when test="opt == '상품명'">
						product_name like '%' || #{keyword} || '%'
					</when>
					<when test="opt == '제조사'">
						product_maker = #{keyword}
					</when>
					<when test="opt == '가격'">
						product_price <= #{keyword}
					</when>
				</choose>
			</where>
		)
		where 
			rownumber between #{begin} and #{end}
	</select>
-->		
	
	<!-- 상품번호에 해당하는 상품정보 하나 조회 -->
	<select id="getProductByNo" parameterType="int" resultType="Product">
		select product_no				as no,
			   product_name				as name,
			   product_maker			as maker,
			   product_description		as description,
			   product_price			as price,
			   product_discount_price	as discountPrice,
			   product_on_sell			as onSell,
			   product_stock			as stock,
			   product_update_date		as updateDate,
			   product_create_date		as createDate,
			   cat_no					as catNo
		from web_products
		where product_no = #{value}
	</select>
	
	<!-- 상품번호에 해당하는 상품정보 삭제 -->
	<delete id="deleteProductByNo" parameterType="int">
		delete 
		from web_products
		where product_no = #{value}
	</delete>
	
	<!-- 변경된 상품정보를 전달받아서 상품정보 변경 -->
	<update id="updateProductByNo" parameterType="Product" >
		update web_products
		<set>
				product_name = #{name},
				product_maker = #{maker},
				product_description = #{description},
				product_price = #{price},
				product_discount_price = #{discountPrice},
				product_on_sell = #{onSell},
				product_stock = #{stock},
				product_update_date = sysdate,
				cat_no = #{catNo},
		</set>
		where product_no = #{no}
	</update>

	<!-- 
		상품이름, 제조회사, 최소가격/최대가격, 카테고리 번호를 전달받아서 상품정보를 검색 
		(검색 조건은 위에 나열된 것 중에서 하나도 사용되지 않을 수도, 전부 사용될 수도 있다.) 
	 -->
	<select id="searchProducts" parameterType="map" resultType="Product" >
		select product_no				as no,
			   product_name				as name,
			   product_maker			as maker,
			   product_description		as description,
			   product_price			as price,
			   product_discount_price	as discountPrice,
			   product_on_sell			as onSell,
			   product_stock			as stock,
			   product_update_date		as updateDate,
			   product_create_date		as createDate,
			   cat_no					as catNo
		from web_products
		
		<where>
			<if test="name != null">
				product_name like '%' || #{name} || '%'
			</if>
			<if test="maker != null">
				and product_maker = #{maker}
			</if>
			<if test="min != null and max != null">
	  			and product_price >= #{min} and product_price &lt;= #{max} 
	  		</if>
	  		<if test="catno != null">
				and cat_no = #{catNo}
			</if>
		</where>
	</select>
</mapper>
















